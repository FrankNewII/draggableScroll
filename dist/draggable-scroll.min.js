!function(e){if("function"==typeof define&&define.amd)define(["jquery"],e);else if("object"==typeof module&&module.exports)module.exports=e(require("jquery"));else{if("undefined"==typeof jQuery)throw new Error("DraggableScroll: Draggable scroll is depended on JQuery. \n            Please append JQuery to document before load DraggableScroll plugin.");e(jQuery)}}(function(s){s.fn.draggableScroll=function e(l){if(!(this instanceof e))return(l=e.validateConfig(l)).$element=this,new e(l);this._config=l,this._$scrolledElm=this._config.$element,this._pressed=!1,this._startX=void 0,this._startY=void 0,this._startScrollX=void 0,this._startScrollY=void 0,this._findElm()._appendStyles()._initListeners()};var l=s.fn.draggableScroll,e=s.fn.draggableScroll.prototype;l.validateConfig=function(e){switch(typeof e){case"object":return s.extend(l.defaultConfig,e);case"undefined":return s.extend(l.defaultConfig,{});default:throw new Error("DraggableScroll: Undefined type of config argument.")}},l.defaultConfig={scrollX:!0,scrollY:!0,dropOnMouseLeave:!1,hideScrollbars:!0},e.scrollTo=function(e,l){var t="scroll"+e.charAt(0).toUpperCase()+e.slice(1),o=l?this._$scrolledElm[t](l):this._$scrolledElm[t]();return l&&console.log(arguments),l?this:o},e._findElm=function(){if(this._$scrolledWrapper=this._config.$element,this._$scrolledElm=this._config.$element.find("[data-draggable-scrolled-content]"),0===this._$scrolledElm.length)throw new Error("DraggableScroll: Cannon find scrolled content element. \n            Use [data-draggable-scrolled-content] inside [data-draggable-scroll] container.");if(1<this._$scrolledElm.length)throw new Error("DraggableScroll: Found more than one [data-draggable-scrolled-content] inside [data-draggable-scroll] container.");return this},e._appendStyles=function(){var e=this._config.hideScrollbars;return this._$scrolledWrapper.css("user-select","none"),e&&this._$scrolledWrapper.css("overflow","hidden"),this._$scrolledElm.css({overflow:"scroll",height:e?"calc(100% + 16px)":"100%",width:e?"calc(100% + 16px)":"100%"}),this},e._initListeners=function(){return this._$scrolledElm.on("mousedown",this.__mousedownHandler.bind(this)).on("mouseup",this.__mouseupHandler.bind(this)).on("mousemove",this.__mousemoveHandler.bind(this)),this._$scrolledWrapper.find("[data-draggable-scroll-control]").on("click",this.__controlsClickHandler.bind(this)),this._config.dropOnMouseLeave&&this._$scrolledElm.on("mouseleave",this.__mouseupHandler.bind(this)),this},e.__mouseupHandler=function(){this._pressed=!1,this._$scrolledWrapper.removeClass("scrollDraggable-draging")},e.__mousedownHandler=function(e){this._pressed=!0,this._startX=e.clientX,this._startY=e.clientY,this._startScrollX=this.scrollTo("left"),this._startScrollY=this.scrollTo("top"),this._$scrolledWrapper.addClass("scrollDraggable-draging")},e.__mousemoveHandler=function(e){this._pressed&&(this._config.scrollX&&this.scrollTo("left",this._startScrollX+(this._startX-e.clientX)),this._config.scrollY&&this.scrollTo("top",this._startScrollY+(this._startY-e.clientY)))},e.__controlsClickHandler=function(e){var l,t=s(e.target).data("draggableScrollControl").split(":"),o=t[0],r=parseInt(t[1]);switch(o){case"top":r=0-r,l=this.scrollTo("top");break;case"bottom":l=this.scrollTo("top"),o="top";break;case"left":l=this.scrollTo("left"),r=0-r;break;case"right":o="left",l=this.scrollTo("left")}this.scrollTo(o,l+r)};var t=s("[data-draggable-scroll]");t.length&&t.each(function(e,l){s(l).draggableScroll()})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRyYWdnYWJsZS1zY3JvbGwuanMiXSwibmFtZXMiOlsiZmFjdG9yeSIsImRlZmluZSIsImFtZCIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIiwialF1ZXJ5IiwiRXJyb3IiLCIkIiwiZm4iLCJkcmFnZ2FibGVTY3JvbGwiLCJEcmFnZ2FibGVTY3JvbGwiLCJjb25maWciLCJ0aGlzIiwidmFsaWRhdGVDb25maWciLCIkZWxlbWVudCIsIl9jb25maWciLCJfJHNjcm9sbGVkRWxtIiwiX3ByZXNzZWQiLCJfc3RhcnRYIiwidW5kZWZpbmVkIiwiX3N0YXJ0WSIsIl9zdGFydFNjcm9sbFgiLCJfc3RhcnRTY3JvbGxZIiwiX2ZpbmRFbG0iLCJfYXBwZW5kU3R5bGVzIiwiX2luaXRMaXN0ZW5lcnMiLCJzdGF0aWNzIiwicHJvdG90eXBlIiwiY29uZiIsImV4dGVuZCIsImRlZmF1bHRDb25maWciLCJzY3JvbGxYIiwic2Nyb2xsWSIsImRyb3BPbk1vdXNlTGVhdmUiLCJoaWRlU2Nyb2xsYmFycyIsInNjcm9sbFRvIiwidHVybiIsInB4cyIsIm1ldGhvZCIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwic2xpY2UiLCJ2YWwiLCJjb25zb2xlIiwibG9nIiwiYXJndW1lbnRzIiwiXyRzY3JvbGxlZFdyYXBwZXIiLCJmaW5kIiwibGVuZ3RoIiwiaGlkZVNjcm9sbCIsImNzcyIsIm92ZXJmbG93IiwiaGVpZ2h0Iiwid2lkdGgiLCJvbiIsIl9fbW91c2Vkb3duSGFuZGxlciIsImJpbmQiLCJfX21vdXNldXBIYW5kbGVyIiwiX19tb3VzZW1vdmVIYW5kbGVyIiwiX19jb250cm9sc0NsaWNrSGFuZGxlciIsInJlbW92ZUNsYXNzIiwiZXYiLCJjbGllbnRYIiwiY2xpZW50WSIsImFkZENsYXNzIiwiY3VycmVudFZhbCIsImRhdGEiLCJ0YXJnZXQiLCJzcGxpdCIsImRpcmVjdGlvbiIsInN0ZXAiLCJwYXJzZUludCIsIiRjb250YWluZXJzIiwiZWFjaCIsImkiLCJlbCJdLCJt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QUFDLFFBQ0FsRCxLQUFBUSxRQUFBeUMsRUFBQUUsUUFDQW5ELEtBQUFTLGNBQUFULEtBQUF1QixTQUFBLFFBQ0F2QixLQUFBVSxjQUFBVixLQUFBdUIsU0FBQSxPQUNBdkIsS0FBQWtDLGtCQUFBa0IsU0FBQSw0QkFHQXJDLEVBQUErQixtQkFBQSxTQUFBRyxHQUNBakQsS0FBQUssV0FDQUwsS0FBQUcsUUFBQWdCLFNBQUFuQixLQUFBdUIsU0FBQSxPQUFBdkIsS0FBQVMsZUFBQVQsS0FBQU0sUUFBQTJDLEVBQUFDLFVBQ0FsRCxLQUFBRyxRQUFBaUIsU0FBQXBCLEtBQUF1QixTQUFBLE1BQUF2QixLQUFBVSxlQUFBVixLQUFBUSxRQUFBeUMsRUFBQUUsWUFJQXBDLEVBQUFnQyx1QkFBQSxTQUFBRSxHQUNBLElBSUFJLEVBSEFDLEVBREEzRCxFQUFBc0QsRUFBQU0sUUFDQUQsS0FBQSwwQkFBQUUsTUFBQSxLQUNBQyxFQUFBSCxFQUFBLEdBQ0FJLEVBQUFDLFNBQUFMLEVBQUEsSUFHQSxPQUFBRyxHQUNBLElBQUEsTUFDQUMsRUFBQSxFQUFBQSxFQUNBTCxFQUFBckQsS0FBQXVCLFNBQUEsT0FDQSxNQUNBLElBQUEsU0FDQThCLEVBQUFyRCxLQUFBdUIsU0FBQSxPQUNBa0MsRUFBQSxNQUNBLE1BQ0EsSUFBQSxPQUNBSixFQUFBckQsS0FBQXVCLFNBQUEsUUFDQW1DLEVBQUEsRUFBQUEsRUFDQSxNQUNBLElBQUEsUUFDQUQsRUFBQSxPQUNBSixFQUFBckQsS0FBQXVCLFNBQUEsUUFJQXZCLEtBQUF1QixTQUFBa0MsRUFBQUosRUFBQUssSUFHQSxJQUFBRSxFQUFBakUsRUFBQSwyQkFFQWlFLEVBQUF4QixRQUNBd0IsRUFBQUMsS0FBQSxTQUFBQyxFQUFBQyxHQUNBcEUsRUFBQW9FLEdBQUFsRSIsImZpbGUiOiJkcmFnZ2FibGUtc2Nyb2xsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIChmYWN0b3J5KSB7XG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICBkZWZpbmUoWydqcXVlcnknXSwgZmFjdG9yeSk7XG5cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKCdqcXVlcnknKSk7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodHlwZW9mIGpRdWVyeSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRHJhZ2dhYmxlU2Nyb2xsOiBEcmFnZ2FibGUgc2Nyb2xsIGlzIGRlcGVuZGVkIG9uIEpRdWVyeS4gXFxuXFxcbiAgICAgICAgICAgIFBsZWFzZSBhcHBlbmQgSlF1ZXJ5IHRvIGRvY3VtZW50IGJlZm9yZSBsb2FkIERyYWdnYWJsZVNjcm9sbCBwbHVnaW4uJyk7XG4gICAgICAgIH1cblxuICAgICAgICBmYWN0b3J5KGpRdWVyeSk7XG4gICAgfVxufShmdW5jdGlvbiAoJCkge1xuICAgICQuZm4uZHJhZ2dhYmxlU2Nyb2xsID0gZnVuY3Rpb24gRHJhZ2dhYmxlU2Nyb2xsKGNvbmZpZykge1xuICAgICAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgRHJhZ2dhYmxlU2Nyb2xsKSkge1xuICAgICAgICAgICAgY29uZmlnID0gRHJhZ2dhYmxlU2Nyb2xsLnZhbGlkYXRlQ29uZmlnKGNvbmZpZyk7XG4gICAgICAgICAgICBjb25maWcuJGVsZW1lbnQgPSB0aGlzO1xuXG4gICAgICAgICAgICByZXR1cm4gbmV3IERyYWdnYWJsZVNjcm9sbChjb25maWcpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fY29uZmlnID0gY29uZmlnO1xuICAgICAgICB0aGlzLl8kc2Nyb2xsZWRFbG0gPSB0aGlzLl9jb25maWcuJGVsZW1lbnQ7XG4gICAgICAgIHRoaXMuX3ByZXNzZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fc3RhcnRYID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9zdGFydFkgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuX3N0YXJ0U2Nyb2xsWCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fc3RhcnRTY3JvbGxZID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9maW5kRWxtKClcbiAgICAgICAgICAgIC5fYXBwZW5kU3R5bGVzKClcbiAgICAgICAgICAgIC5faW5pdExpc3RlbmVycygpO1xuICAgIH07XG5cbiAgICB2YXIgc3RhdGljcyA9ICQuZm4uZHJhZ2dhYmxlU2Nyb2xsO1xuICAgIHZhciBwcm90b3R5cGUgPSAkLmZuLmRyYWdnYWJsZVNjcm9sbC5wcm90b3R5cGU7XG5cbiAgICBzdGF0aWNzLnZhbGlkYXRlQ29uZmlnID0gZnVuY3Rpb24gKGNvbmYpIHtcbiAgICAgICAgc3dpdGNoICh0eXBlb2YgKGNvbmYpKSB7XG4gICAgICAgICAgICBjYXNlICdvYmplY3QnOlxuICAgICAgICAgICAgICAgIHJldHVybiAkLmV4dGVuZChzdGF0aWNzLmRlZmF1bHRDb25maWcsIGNvbmYpO1xuICAgICAgICAgICAgY2FzZSAndW5kZWZpbmVkJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gJC5leHRlbmQoc3RhdGljcy5kZWZhdWx0Q29uZmlnLCB7fSk7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRHJhZ2dhYmxlU2Nyb2xsOiBVbmRlZmluZWQgdHlwZSBvZiBjb25maWcgYXJndW1lbnQuJyk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgc3RhdGljcy5kZWZhdWx0Q29uZmlnID0ge1xuICAgICAgICBzY3JvbGxYOiB0cnVlLFxuICAgICAgICBzY3JvbGxZOiB0cnVlLFxuICAgICAgICBkcm9wT25Nb3VzZUxlYXZlOiBmYWxzZSxcbiAgICAgICAgaGlkZVNjcm9sbGJhcnM6IHRydWVcbiAgICB9O1xuXG4gICAgcHJvdG90eXBlLnNjcm9sbFRvID0gZnVuY3Rpb24gKHR1cm4sIHB4cykge1xuICAgICAgICB2YXIgbWV0aG9kID0gJ3Njcm9sbCcgKyB0dXJuLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgdHVybi5zbGljZSgxKTtcbiAgICAgICAgdmFyIHZhbCA9IHB4cz90aGlzLl8kc2Nyb2xsZWRFbG1bbWV0aG9kXShweHMpOnRoaXMuXyRzY3JvbGxlZEVsbVttZXRob2RdKCk7XG5cbiAgICAgICAgaWYocHhzKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhcHhzP3ZhbDp0aGlzO1xuICAgIH07XG5cbiAgICBwcm90b3R5cGUuX2ZpbmRFbG0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuXyRzY3JvbGxlZFdyYXBwZXIgPSB0aGlzLl9jb25maWcuJGVsZW1lbnQ7XG4gICAgICAgIHRoaXMuXyRzY3JvbGxlZEVsbSA9IHRoaXMuX2NvbmZpZy4kZWxlbWVudC5maW5kKCdbZGF0YS1kcmFnZ2FibGUtc2Nyb2xsZWQtY29udGVudF0nKTtcblxuICAgICAgICBpZiAodGhpcy5fJHNjcm9sbGVkRWxtLmxlbmd0aCA9PT0gMClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRHJhZ2dhYmxlU2Nyb2xsOiBDYW5ub24gZmluZCBzY3JvbGxlZCBjb250ZW50IGVsZW1lbnQuIFxcblxcXG4gICAgICAgICAgICBVc2UgW2RhdGEtZHJhZ2dhYmxlLXNjcm9sbGVkLWNvbnRlbnRdIGluc2lkZSBbZGF0YS1kcmFnZ2FibGUtc2Nyb2xsXSBjb250YWluZXIuJyk7XG5cbiAgICAgICAgaWYgKHRoaXMuXyRzY3JvbGxlZEVsbS5sZW5ndGggPiAxKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdEcmFnZ2FibGVTY3JvbGw6IEZvdW5kIG1vcmUgdGhhbiBvbmUgW2RhdGEtZHJhZ2dhYmxlLXNjcm9sbGVkLWNvbnRlbnRdIGluc2lkZSBbZGF0YS1kcmFnZ2FibGUtc2Nyb2xsXSBjb250YWluZXIuJyk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIHByb3RvdHlwZS5fYXBwZW5kU3R5bGVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaGlkZVNjcm9sbCA9IHRoaXMuX2NvbmZpZy5oaWRlU2Nyb2xsYmFycztcbiAgICAgICAgdGhpcy5fJHNjcm9sbGVkV3JhcHBlci5jc3MoJ3VzZXItc2VsZWN0Jywnbm9uZScpO1xuXG4gICAgICAgIGlmIChoaWRlU2Nyb2xsKSB7XG4gICAgICAgICAgICB0aGlzLl8kc2Nyb2xsZWRXcmFwcGVyLmNzcygnb3ZlcmZsb3cnLCdoaWRkZW4nKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl8kc2Nyb2xsZWRFbG0uY3NzKHtcbiAgICAgICAgICAgICdvdmVyZmxvdyc6ICdzY3JvbGwnLFxuICAgICAgICAgICAgJ2hlaWdodCc6IGhpZGVTY3JvbGw/J2NhbGMoMTAwJSArIDE2cHgpJzonMTAwJScsXG4gICAgICAgICAgICAnd2lkdGgnOiBoaWRlU2Nyb2xsPydjYWxjKDEwMCUgKyAxNnB4KSc6JzEwMCUnLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIHByb3RvdHlwZS5faW5pdExpc3RlbmVycyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fJHNjcm9sbGVkRWxtXG4gICAgICAgICAgICAub24oJ21vdXNlZG93bicsIHRoaXMuX19tb3VzZWRvd25IYW5kbGVyLmJpbmQodGhpcykpXG4gICAgICAgICAgICAub24oJ21vdXNldXAnLCB0aGlzLl9fbW91c2V1cEhhbmRsZXIuYmluZCh0aGlzKSlcbiAgICAgICAgICAgIC5vbignbW91c2Vtb3ZlJywgdGhpcy5fX21vdXNlbW92ZUhhbmRsZXIuYmluZCh0aGlzKSk7XG5cbiAgICAgICAgdGhpcy5fJHNjcm9sbGVkV3JhcHBlclxuICAgICAgICAgICAgLmZpbmQoJ1tkYXRhLWRyYWdnYWJsZS1zY3JvbGwtY29udHJvbF0nKVxuICAgICAgICAgICAgLm9uKCdjbGljaycsIHRoaXMuX19jb250cm9sc0NsaWNrSGFuZGxlci5iaW5kKHRoaXMpKTtcblxuICAgICAgICBpZiAodGhpcy5fY29uZmlnLmRyb3BPbk1vdXNlTGVhdmUpIHtcbiAgICAgICAgICAgIHRoaXMuXyRzY3JvbGxlZEVsbS5vbignbW91c2VsZWF2ZScsIHRoaXMuX19tb3VzZXVwSGFuZGxlci5iaW5kKHRoaXMpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbiAgICBwcm90b3R5cGUuX19tb3VzZXVwSGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fcHJlc3NlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl8kc2Nyb2xsZWRXcmFwcGVyLnJlbW92ZUNsYXNzKCdzY3JvbGxEcmFnZ2FibGUtZHJhZ2luZycpO1xuICAgIH07XG5cbiAgICBwcm90b3R5cGUuX19tb3VzZWRvd25IYW5kbGVyID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgIHRoaXMuX3ByZXNzZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLl9zdGFydFggPSBldi5jbGllbnRYO1xuICAgICAgICB0aGlzLl9zdGFydFkgPSBldi5jbGllbnRZO1xuICAgICAgICB0aGlzLl9zdGFydFNjcm9sbFggPSB0aGlzLnNjcm9sbFRvKCdsZWZ0Jyk7XG4gICAgICAgIHRoaXMuX3N0YXJ0U2Nyb2xsWSA9IHRoaXMuc2Nyb2xsVG8oJ3RvcCcpO1xuICAgICAgICB0aGlzLl8kc2Nyb2xsZWRXcmFwcGVyLmFkZENsYXNzKCdzY3JvbGxEcmFnZ2FibGUtZHJhZ2luZycpO1xuICAgIH07XG5cbiAgICBwcm90b3R5cGUuX19tb3VzZW1vdmVIYW5kbGVyID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgIGlmKHRoaXMuX3ByZXNzZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2NvbmZpZy5zY3JvbGxYICYmIHRoaXMuc2Nyb2xsVG8oJ2xlZnQnLCB0aGlzLl9zdGFydFNjcm9sbFggKyAodGhpcy5fc3RhcnRYIC0gZXYuY2xpZW50WCkgKTtcbiAgICAgICAgICAgIHRoaXMuX2NvbmZpZy5zY3JvbGxZICYmIHRoaXMuc2Nyb2xsVG8oJ3RvcCcsIHRoaXMuX3N0YXJ0U2Nyb2xsWSArICh0aGlzLl9zdGFydFkgLSBldi5jbGllbnRZKSApO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHByb3RvdHlwZS5fX2NvbnRyb2xzQ2xpY2tIYW5kbGVyID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICAgIHZhciAkdGFyZ2V0ID0gJChldi50YXJnZXQpO1xuICAgICAgICB2YXIgZGF0YSA9ICR0YXJnZXQuZGF0YSgnZHJhZ2dhYmxlU2Nyb2xsQ29udHJvbCcpLnNwbGl0KCc6Jyk7XG4gICAgICAgIHZhciBkaXJlY3Rpb24gPSBkYXRhWzBdO1xuICAgICAgICB2YXIgc3RlcCA9IHBhcnNlSW50KGRhdGFbMV0pO1xuICAgICAgICB2YXIgY3VycmVudFZhbDtcblxuICAgICAgICBzd2l0Y2ggKGRpcmVjdGlvbikge1xuICAgICAgICAgICAgY2FzZSAndG9wJzpcbiAgICAgICAgICAgICAgICBzdGVwID0gMCAtIHN0ZXA7XG4gICAgICAgICAgICAgICAgY3VycmVudFZhbCA9IHRoaXMuc2Nyb2xsVG8oJ3RvcCcpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnYm90dG9tJzpcbiAgICAgICAgICAgICAgICBjdXJyZW50VmFsID0gdGhpcy5zY3JvbGxUbygndG9wJyk7XG4gICAgICAgICAgICAgICAgZGlyZWN0aW9uID0gJ3RvcCc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdsZWZ0JzpcbiAgICAgICAgICAgICAgICBjdXJyZW50VmFsID0gdGhpcy5zY3JvbGxUbygnbGVmdCcpO1xuICAgICAgICAgICAgICAgIHN0ZXAgPSAwIC0gc3RlcDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgICAgICAgICAgICBkaXJlY3Rpb24gPSAnbGVmdCc7XG4gICAgICAgICAgICAgICAgY3VycmVudFZhbCA9IHRoaXMuc2Nyb2xsVG8oJ2xlZnQnKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2Nyb2xsVG8oZGlyZWN0aW9uLCBjdXJyZW50VmFsICsgc3RlcCk7XG4gICAgfTtcblxuICAgIHZhciAkY29udGFpbmVycyA9ICQoJ1tkYXRhLWRyYWdnYWJsZS1zY3JvbGxdJyk7XG5cbiAgICBpZigkY29udGFpbmVycy5sZW5ndGgpIHtcbiAgICAgICAgJGNvbnRhaW5lcnMuZWFjaChmdW5jdGlvbiAoaSwgZWwpIHtcbiAgICAgICAgICAgICQoZWwpLmRyYWdnYWJsZVNjcm9sbCgpO1xuICAgICAgICB9KTtcbiAgICB9XG59KSk7Il19
