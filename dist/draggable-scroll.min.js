!function(e){if("function"==typeof define&&define.amd)define(["jquery"],e);else if("object"==typeof module&&module.exports)module.exports=e(require("jquery"));else{if("undefined"==typeof jQuery)throw new Error("DraggableScroll: Draggable scroll is depended on JQuery. \n            Please append JQuery to document before load DraggableScroll plugin.");e(jQuery)}}(function(s){s.fn.draggableScroll=function e(t){if(!(this instanceof e))return(t=e.validateConfig(t)).$element=this,new e(t);this._config=t,this._$scrolledElm=this._config.$element,this._pressed=!1,this._startX=void 0,this._isAnimate=!1,this._startY=void 0,this._startScrollX=void 0,this._startScrollY=void 0,this._findElm()._appendStyles()._initListeners()};var t,n=s.fn.draggableScroll,e=s.fn.draggableScroll.prototype;n.validateConfig=function(e){switch(typeof e){case"object":return s.extend(n.defaultConfig,e);case"undefined":return s.extend(n.defaultConfig,{});default:throw new Error("DraggableScroll: Undefined type of config argument.")}},n._unitsConverters={px:function(e){return e},vw:(t=s(document),function(e){return t.width()/100*e})},n.addUnitConverter=function(e,t){n._unitsConverters[e]&&console.warn("Converter for "+e+" was changed."),n._unitsConverters[e]=t},n.converterUnitToPxs=function(e,t){var r=n._unitsConverters[t];if(!r)throw new Error('Undefined css units named as: "'+t+'" \n.Add converter ($.fn.draggableScroll.addUnitConverter(unit, convertFunction)) to PXs for that unit, or you have a typo.');return r(e)},n.defaultConfig={scrollX:!0,scrollY:!0,dropOnMouseLeave:!1,animateScrollByControls:!0,animateScrollTime:200,hideScrollbars:!0},e.scrollTo=function(e,t,r){var o,l="scroll"+e.charAt(0).toUpperCase()+e.slice(1);if(void 0!==t)if(r){var s={};s[l]=t,this._$scrolledElm.animate(s,this._config.animateScrollTime),this._isAnimate=!0,setTimeout(function(){this._isAnimate=!1}.bind(this),this._config.animateScrollTime)}else this._$scrolledElm[l](t);else o=this._$scrolledElm[l]();return o},e._findElm=function(){if(this._$scrolledWrapper=this._config.$element,this._$scrolledElm=this._config.$element.find("[data-draggable-scrolled-content]"),0===this._$scrolledElm.length)throw new Error("DraggableScroll: Cannon find scrolled content element. \n            Use [data-draggable-scrolled-content] inside [data-draggable-scroll] container.");if(1<this._$scrolledElm.length)throw new Error("DraggableScroll: Found more than one [data-draggable-scrolled-content] inside [data-draggable-scroll] container.");return this},e._appendStyles=function(){var e=this._config.hideScrollbars;return this._$scrolledWrapper.css("user-select","none"),e&&this._$scrolledWrapper.css("overflow","hidden"),this._$scrolledElm.css({overflow:"scroll",height:e?"calc(100% + 17px)":"100%",width:e?"calc(100% + 17px)":"100%"}),this},e._initListeners=function(){return this._$scrolledElm.on("mousedown",this.__mousedownHandler.bind(this)).on("mouseup",this.__mouseupHandler.bind(this)).on("mousemove",this.__mousemoveHandler.bind(this)),this._$scrolledWrapper.find("[data-draggable-scroll-control]").on("click",this.__controlsClickHandler.bind(this)),this._config.dropOnMouseLeave&&this._$scrolledElm.on("mouseleave",this.__mouseupHandler.bind(this)),this},e.__mouseupHandler=function(){this._pressed=!1,this._$scrolledWrapper.removeClass("scrollDraggable-draging")},e.__mousedownHandler=function(e){this._pressed=!0,this._startX=e.clientX,this._startY=e.clientY,this._startScrollX=this.scrollTo("left"),this._startScrollY=this.scrollTo("top"),this._$scrolledWrapper.addClass("scrollDraggable-draging")},e.__mousemoveHandler=function(e){this._pressed&&(this._config.scrollX&&this.scrollTo("left",this._startScrollX+(this._startX-e.clientX)),this._config.scrollY&&this.scrollTo("top",this._startScrollY+(this._startY-e.clientY)))},e.__controlsClickHandler=function(e){if(!this._isAnimate){var t,r=s(e.target).data("draggableScrollControl").split(":"),o=r[0],l=n.converterUnitToPxs(parseInt(r[1]),r[1].match(/[^\d\.]+/i)[0]);switch(o){case"top":l=0-l,t=this.scrollTo("top");break;case"bottom":t=this.scrollTo("top"),o="top";break;case"left":t=this.scrollTo("left"),l=0-l;break;case"right":o="left",t=this.scrollTo("left")}this.scrollTo(o,t+l,this._config.animateScrollByControls)}};var r=s("[data-draggable-scroll]");r.length&&r.each(function(e,t){s(t).draggableScroll()})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
