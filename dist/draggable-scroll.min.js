!function s(i,n,l){function a(r,t){if(!n[r]){if(!i[r]){var e="function"==typeof require&&require;if(!t&&e)return e(r,!0);if(c)return c(r,!0);throw new Error("Cannot find module '"+r+"'")}var o=n[r]={exports:{}};i[r][0].call(o.exports,function(t){var e=i[r][1][t];return a(e||t)},o,o.exports,s,i,n,l)}return n[r].exports}for(var c="function"==typeof require&&require,t=0;t<l.length;t++)a(l[t]);return a}({1:[function(t,e,r){function o(t,e){this._totalInertionEnergy=0,this._totalInertionFrames=1,this._inertiaX=0,this._inertiaY=0,this._inertiaSpeed=e,this._lastInertionsPoints=[],this._pointsToCheckImpulse=4,this._aggregator=t}var s=o.prototype;s.reset=function(){this._totalInertionEnergy=0,this._totalInertionFrames=1},s.addMovePoints=function(t,e){return this._lastInertionsPoints.push({x:t,y:e})>this._pointsToCheckImpulse&&this._lastInertionsPoints.shift(),this},s._clearMovePoints=function(){return this._lastInertionsPoints.length=0,this},s.inertionMove=function(){if(1500<this._totalInertionEnergy){var t=this;this._aggregator._$scrolledWrapper.addClass("scrollDraggable-inertia-move");var e=this._inertiaX/this._totalInertionFrames;this._totalInertionEnergy-=12*Math.abs(e),this._aggregator.scrollTo("left",this._aggregator.scrollTo("left")+e);var r=this._inertiaY/this._totalInertionFrames;this._totalInertionEnergy-=12*Math.abs(r),this._aggregator.scrollTo("top",this._aggregator.scrollTo("top")+r),this._aggregator.emitEvent({type:"draggableScroll:inertia",data:{leavePower:this._totalInertionEnergy,stepX:e,stepY:r}}),0<this._totalInertionEnergy?(this._totalInertionFrames++,setTimeout(function(){t.inertionMove()},Math.ceil(1e3/60))):(this._breakInertion=!1,this._aggregator._$scrolledWrapper.removeClass("scrollDraggable-inertia-move"))}else this._aggregator._$scrolledWrapper.removeClass("scrollDraggable-inertia-move")},s.startInertionTo=function(t,e){var r=0,o=0;this._lastInertionsPoints.forEach(function(t){r+=t.x,o+=t.y}),r/=this._lastInertionsPoints.length,o/=this._lastInertionsPoints.length,this._clearMovePoints()._setInertion(r,o,t,e).inertionMove()},s._setInertion=function(t,e,r,o){return this._inertiaX=60*(t-r),this._inertiaY=60*(e-o),this._totalInertionEnergy=Math.abs(this._inertiaX)+Math.abs(this._inertiaY),this._totalInertionFrames=this._inertiaSpeed,this},e.exports=o},{}],2:[function(t,e,r){var o=t("./draggable-scroll_inertion");$.fn.draggableScroll=function t(e){if(!(this instanceof t))return(e=t._validateConfig(e)).$element=this,new t(e);this._config=e,this._$scrolledElm=this._config.$element,this._pressed=!1,this._isAnimate=!1,this._startScrollX=void 0,this._startScrollY=void 0,this._startMousedownX=void 0,this._startMousedownY=void 0,this._inertia=new o(this,this._config.inertialResistance),this._findElms()._appendStyles()._initListeners()};var s,i,n=$.fn.draggableScroll,l=$.fn.draggableScroll.prototype;n.defaultConfig={scrollX:!0,scrollY:!0,dropOnMouseLeave:!1,animateScrollByControls:!0,animateScrollTime:200,hideScrollbars:!0,inertiaByDragging:!0,detectDirectionDrag:!0,removeDirectionDragOnMouseUp:!0,inertialResistance:150},n._validateConfig=function(t){switch(typeof t){case"object":return $.extend(n.defaultConfig,t);case"undefined":return $.extend(n.defaultConfig,{});default:throw new Error("DraggableScroll: Undefined type of config argument.")}},n._unitsConverters={px:function(t){return t},vw:(i=$(document),function(t){return i.width()/100*t}),vh:(s=$(document),function(t){return s.height()/100*t})},n.addUnitConverter=function(t,e){n._unitsConverters[t]&&console.warn("Converter for "+t+" was changed."),n._unitsConverters[t]=e},n.converterUnitToPxs=function(t,e){var r=n._unitsConverters[e];if(!r)throw new Error('Undefined css units named as: "'+e+'" \n.Add converter ($.fn.draggableScroll.addUnitConverter(unit, convertFunction)) to PXs for that unit, or you have a typo.');return r(t)},l.scrollTo=function(t,e,r){var o,s="scroll"+t.charAt(0).toUpperCase()+t.slice(1);if(void 0!==e)if(r){var i={};i[s]=e,this._$scrolledElm.animate(i,this._config.animateScrollTime,function(){this._isAnimate=!1}.bind(this)),this._isAnimate=!0}else this._$scrolledElm[s](e);else o=this._$scrolledElm[s]();return o},l.emitEvent=function(t){this._$scrolledElm.trigger(t)},l._findElms=function(){if(this._$scrolledWrapper=this._config.$element,this._$scrolledElm=this._config.$element.find("[data-draggable-scrolled-content]"),0===this._$scrolledElm.length)throw new Error("DraggableScroll: Cannon find scrolled content element. \n            Use [data-draggable-scrolled-content] inside [data-draggable-scroll] container.");if(1<this._$scrolledElm.length)throw new Error("DraggableScroll: Found more than one [data-draggable-scrolled-content] inside [data-draggable-scroll] container.");return this},l._appendStyles=function(){var t=this._config.hideScrollbars;return this._$scrolledWrapper.css("user-select","none"),t&&this._$scrolledWrapper.css("overflow","hidden"),this._$scrolledElm.css({overflow:"scroll",height:t?"calc(100% + 17px)":"100%",width:t?"calc(100% + 17px)":"100%"}),this},l._removeDirectionsClasses=function(){return this._config.detectDirectionDrag&&this._config.removeDirectionDragOnMouseUp&&this._$scrolledWrapper.removeClass("scroll-draggable_move_left scroll-draggable_move_right scroll-draggable_move_top scroll-draggable_move_bottom"),this},l._toggleDirectionsClasses=function(t,e,r,o){return t<r?this._$scrolledWrapper.addClass("scroll-draggable_move_left").removeClass("scroll-draggable_move_right"):t===r?this._$scrolledWrapper.removeClass("scroll-draggable_move_right scroll-draggable_move_left"):this._$scrolledWrapper.addClass("scroll-draggable_move_right").removeClass("scroll-draggable_move_left"),e<o?this._$scrolledWrapper.addClass("scroll-draggable_move_top").removeClass("scroll-draggable_move_bottom"):e===o?this._$scrolledWrapper.removeClass("scroll-draggable_move_bottom scroll-draggable_move_top"):this._$scrolledWrapper.addClass("scroll-draggable_move_bottom").removeClass("scroll-draggable_move_top"),this},l._initListeners=function(){return this._$scrolledElm.on("mousedown",this.__mousedownHandler.bind(this)).on("mouseup",this.__mouseupHandler.bind(this)).on("mousemove",this.__mousemoveHandler.bind(this)),this._$scrolledWrapper.find("[data-draggable-scroll-control]").on("click",this.__controlsClickHandler.bind(this)),this._config.dropOnMouseLeave&&this._$scrolledElm.on("mouseleave",this.__mouseupHandler.bind(this)),this},l.__mouseupHandler=function(t){this._pressed=!1,this._$scrolledWrapper.removeClass("scrollDraggable-draging"),this._removeDirectionsClasses(),this._inertia.startInertionTo(t.clientX,t.clientY)},l.__mousedownHandler=function(t){this._pressed=!0,this._startMousedownX=t.clientX,this._startMousedownY=t.clientY,this._startScrollX=this.scrollTo("left"),this._startScrollY=this.scrollTo("top"),this._inertia.addMovePoints(t.clientX,t.clientY).reset(),this._$scrolledWrapper.addClass("scrollDraggable-draging")},l.__mousemoveHandler=function(t){var e=this.scrollTo("left"),r=this.scrollTo("top"),o=this._startScrollX+(this._startMousedownX-t.clientX),s=this._startScrollY+(this._startMousedownY-t.clientY);this._pressed&&(this._inertia.addMovePoints(t.clientX,t.clientY),this._config.scrollX&&this.scrollTo("left",o),this._config.scrollY&&this.scrollTo("top",s),this._toggleDirectionsClasses(e,r,o,s))},l.__controlsClickHandler=function(t){if(!this._isAnimate){this._inertia.reset();var e,r=$(t.currentTarget).data("draggableScrollControl").split(":"),o=r[0],s=n.converterUnitToPxs(parseInt(r[1]),r[1].match(/[^\d\.]+/i)[0]);switch(o){case"top":s=0-s,e=this.scrollTo("top");break;case"bottom":e=this.scrollTo("top"),o="top";break;case"left":e=this.scrollTo("left"),s=0-s;break;case"right":o="left",e=this.scrollTo("left")}this.scrollTo(o,e+s,this._config.animateScrollByControls)}};var a=$("[data-draggable-scroll]");a.length&&a.each(function(t,e){$(e).draggableScroll()})},{"./draggable-scroll_inertion":1}]},{},[2]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRyYWdnYWJsZS1zY3JvbGwuanMiXSwibmFtZXMiOlsiZSIsInQiLCJuIiwiciIsInMiLCJvIiwidSIsImEiLCJyZXF1aXJlIiwiaSIsIkVycm9yIiwiZiIsImV4cG9ydHMiLCJjYWxsIiwibGVuZ3RoIiwiMSIsIm1vZHVsZSIsIkluZXJ0aWEiLCJhZ2dyZWdhdG9yIiwiaW5lcnRpYVNwZWVkIiwidGhpcyIsIl90b3RhbEluZXJ0aW9uRW5lcmd5IiwiX3RvdGFsSW5lcnRpb25GcmFtZXMiLCJfaW5lcnRpYVgiLCJfaW5lcnRpYVkiLCJfaW5lcnRpYVNwZWVkIiwiX2xhc3RJbmVydGlvbnNQb2ludHMiLCJfcG9pbnRzVG9DaGVja0ltcHVsc2UiLCJfYWdncmVnYXRvciIsInByb3RvdHlwZSIsInJlc2V0IiwiYWRkTW92ZVBvaW50cyIsIngiLCJ5IiwicHVzaCIsInNoaWZ0IiwiX2NsZWFyTW92ZVBvaW50cyIsImluZXJ0aW9uTW92ZSIsInNlbGYiLCJfJHNjcm9sbGVkV3JhcHBlciIsImFkZENsYXNzIiwic3RlcFgiLCJNYXRoIiwiYWJzIiwic2Nyb2xsVG8iLCJzdGVwWSIsImVtaXRFdmVudCIsInR5cGUiLCJkYXRhIiwibGVhdmVQb3dlciIsInNldFRpbWVvdXQiLCJjZWlsIiwiX2JyZWFrSW5lcnRpb24iLCJyZW1vdmVDbGFzcyIsInN0YXJ0SW5lcnRpb25UbyIsIngxIiwieTEiLCJsYXN0WCIsImxhc3RZIiwiZm9yRWFjaCIsInYiLCJfc2V0SW5lcnRpb24iLCJ4MiIsInkyIiwiMiIsIiQiLCJmbiIsImRyYWdnYWJsZVNjcm9sbCIsIkRyYWdnYWJsZVNjcm9sbCIsImNvbmZpZyIsIl92YWxpZGF0ZUNvbmZpZyIsIiRlbGVtZW50IiwiX2NvbmZpZyIsIl8kc2Nyb2xsZWRFbG0iLCJfcHJlc3NlZCIsIl9pc0FuaW1hdGUiLCJfc3RhcnRTY3JvbGxYIiwidW5kZWZpbmVkIiwiX3N0YXJ0U2Nyb2xsWSIsIl9zdGFydE1vdXNlZG93blgiLCJfc3RhcnRNb3VzZWRvd25ZIiwiX2luZXJ0aWEiLCJpbmVydGlhbFJlc2lzdGFuY2UiLCJfZmluZEVsbXMiLCJfYXBwZW5kU3R5bGVzIiwiX2luaXRMaXN0ZW5lcnMiLCIkZG9jIiwic3RhdGljcyIsImRlZmF1bHRDb25maWciLCJzY3JvbGxYIiwic2Nyb2xsWSIsImRyb3BPbk1vdXNlTGVhdmUiLCJhbmltYXRlU2Nyb2xsQnlDb250cm9scyIsImFuaW1hdGVTY3JvbGxUaW1lIiwiaGlkZVNjcm9sbGJhcnMiLCJpbmVydGlhQnlEcmFnZ2luZyIsImRldGVjdERpcmVjdGlvbkRyYWciLCJyZW1vdmVEaXJlY3Rpb25EcmFnT25Nb3VzZVVwIiwiY29uZiIsImV4dGVuZCIsIl91bml0c0NvbnZlcnRlcnMiLCJweCIsImRpZyIsInZ3IiwiZG9jdW1lbnQiLCJ3aWR0aCIsInZoIiwiaGVpZ2h0IiwiYWRkVW5pdENvbnZlcnRlciIsInVuaXQiLCJjb252ZXJ0ZXIiLCJjb25zb2xlIiwid2FybiIsImNvbnZlcnRlclVuaXRUb1B4cyIsInR1cm4iLCJ1bml0cyIsImFuaW0iLCJ2YWwiLCJtZXRob2QiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInNsaWNlIiwiYW5pbVBhcmFtIiwiYW5pbWF0ZSIsImJpbmQiLCJldiIsInRyaWdnZXIiLCJmaW5kIiwiaGlkZVNjcm9sbCIsImNzcyIsIm92ZXJmbG93IiwiX3JlbW92ZURpcmVjdGlvbnNDbGFzc2VzIiwiX3RvZ2dsZURpcmVjdGlvbnNDbGFzc2VzIiwicHJldlgiLCJwcmV2WSIsImN1cnJYIiwiY3VyclkiLCJvbiIsIl9fbW91c2Vkb3duSGFuZGxlciIsIl9fbW91c2V1cEhhbmRsZXIiLCJfX21vdXNlbW92ZUhhbmRsZXIiLCJfX2NvbnRyb2xzQ2xpY2tIYW5kbGVyIiwiY2xpZW50WCIsImNsaWVudFkiLCJjdXJyZW50WCIsImN1cnJlbnRZIiwiY3VycmVudFZhbCIsImN1cnJlbnRUYXJnZXQiLCJzcGxpdCIsImRpcmVjdGlvbiIsInN0ZXAiLCJwYXJzZUludCIsIm1hdGNoIiwiJGNv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QUt3QixTQUFTLFFBQzNCMEcsRUFBTyxFQUFJQSxFQUNYLE1BRUosSUFBSyxRQUNERCxFQUFZLE9BQ1pILEVBQWE5SCxLQUFLd0IsU0FBUyxRQUluQ3hCLEtBQUt3QixTQUFTeUcsRUFBV0gsRUFBYUksRUFBTWxJLEtBQUtvRCxRQUFRb0IsMkJBUTdELElBQUk2RCxFQUFjeEYsRUFBRSwyQkFFaEJ3RixFQUFZM0ksUUFDWjJJLEVBQVlDLEtBQUssU0FBVWpKLEVBQUdrSixHQUMxQjFGLEVBQUUwRixHQUFJeEYscUJBR1osQ0FBQ3lGLDhCQUE4QixLQUFLLEdBQUcsQ0FBQyIsImZpbGUiOiJkcmFnZ2FibGUtc2Nyb2xsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpfXZhciBmPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChmLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGYsZi5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkoezE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuZnVuY3Rpb24gSW5lcnRpYShhZ2dyZWdhdG9yLCBpbmVydGlhU3BlZWQpIHtcbiAgICB0aGlzLl90b3RhbEluZXJ0aW9uRW5lcmd5ID0gMDtcbiAgICB0aGlzLl90b3RhbEluZXJ0aW9uRnJhbWVzID0gMTtcblxuICAgIHRoaXMuX2luZXJ0aWFYID0gMDtcbiAgICB0aGlzLl9pbmVydGlhWSA9IDA7XG4gICAgdGhpcy5faW5lcnRpYVNwZWVkID0gaW5lcnRpYVNwZWVkO1xuICAgIHRoaXMuX2xhc3RJbmVydGlvbnNQb2ludHMgPSBbXTtcbiAgICB0aGlzLl9wb2ludHNUb0NoZWNrSW1wdWxzZSA9IDQ7XG4gICAgdGhpcy5fYWdncmVnYXRvciA9IGFnZ3JlZ2F0b3I7XG59XG5cbnZhciBwcm90b3R5cGUgPSBJbmVydGlhLnByb3RvdHlwZTtcblxuXG5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5fdG90YWxJbmVydGlvbkVuZXJneSA9IDA7XG4gICAgdGhpcy5fdG90YWxJbmVydGlvbkZyYW1lcyA9IDE7XG59O1xuXG5wcm90b3R5cGUuYWRkTW92ZVBvaW50cyA9IGZ1bmN0aW9uICh4LCB5KSB7XG4gICAgaWYgKHRoaXMuX2xhc3RJbmVydGlvbnNQb2ludHMucHVzaCh7eDogeCwgeTogeX0pID4gdGhpcy5fcG9pbnRzVG9DaGVja0ltcHVsc2UpIHtcbiAgICAgICAgdGhpcy5fbGFzdEluZXJ0aW9uc1BvaW50cy5zaGlmdCgpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5wcm90b3R5cGUuX2NsZWFyTW92ZVBvaW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9sYXN0SW5lcnRpb25zUG9pbnRzLmxlbmd0aCA9IDA7XG5cbiAgICByZXR1cm4gdGhpcztcbn07XG5cbnByb3RvdHlwZS5pbmVydGlvbk1vdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuX3RvdGFsSW5lcnRpb25FbmVyZ3kgPiAxNTAwKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgICB0aGlzLl9hZ2dyZWdhdG9yXG4gICAgICAgICAgICAuXyRzY3JvbGxlZFdyYXBwZXJcbiAgICAgICAgICAgIC5hZGRDbGFzcygnc2Nyb2xsRHJhZ2dhYmxlLWluZXJ0aWEtbW92ZScpO1xuXG4gICAgICAgIHZhciBzdGVwWCA9IHRoaXMuX2luZXJ0aWFYIC8gdGhpcy5fdG90YWxJbmVydGlvbkZyYW1lcztcbiAgICAgICAgdGhpcy5fdG90YWxJbmVydGlvbkVuZXJneSAtPSBNYXRoLmFicyhzdGVwWCkgKiAxMjtcbiAgICAgICAgdGhpcy5fYWdncmVnYXRvclxuICAgICAgICAgICAgLnNjcm9sbFRvKCdsZWZ0JywgdGhpcy5fYWdncmVnYXRvci5zY3JvbGxUbygnbGVmdCcpICsgc3RlcFgpO1xuXG5cblxuICAgICAgICB2YXIgc3RlcFkgPSB0aGlzLl9pbmVydGlhWSAvIHRoaXMuX3RvdGFsSW5lcnRpb25GcmFtZXM7XG4gICAgICAgIHRoaXMuX3RvdGFsSW5lcnRpb25FbmVyZ3kgLT0gTWF0aC5hYnMoc3RlcFkpICogMTI7XG4gICAgICAgIHRoaXMuX2FnZ3JlZ2F0b3JcbiAgICAgICAgICAgIC5zY3JvbGxUbygndG9wJywgdGhpcy5fYWdncmVnYXRvci5zY3JvbGxUbygndG9wJykgKyBzdGVwWSk7XG5cbiAgICAgICAgdGhpcy5fYWdncmVnYXRvci5lbWl0RXZlbnQoe1xuICAgICAgICAgICAgdHlwZTogJ2RyYWdnYWJsZVNjcm9sbDppbmVydGlhJyxcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICBsZWF2ZVBvd2VyOiB0aGlzLl90b3RhbEluZXJ0aW9uRW5lcmd5LFxuICAgICAgICAgICAgICAgIHN0ZXBYOiBzdGVwWCxcbiAgICAgICAgICAgICAgICBzdGVwWTogc3RlcFksXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICh0aGlzLl90b3RhbEluZXJ0aW9uRW5lcmd5ID4gMCkge1xuICAgICAgICAgICAgdGhpcy5fdG90YWxJbmVydGlvbkZyYW1lcysrO1xuXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcblxuICAgICAgICAgICAgICAgIHNlbGYuaW5lcnRpb25Nb3ZlKCk7XG5cbiAgICAgICAgICAgIH0sIE1hdGguY2VpbCgxMDAwIC8gNjApKTtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fYnJlYWtJbmVydGlvbiA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5fYWdncmVnYXRvclxuICAgICAgICAgICAgICAgIC5fJHNjcm9sbGVkV3JhcHBlclxuICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnc2Nyb2xsRHJhZ2dhYmxlLWluZXJ0aWEtbW92ZScpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fYWdncmVnYXRvclxuICAgICAgICAgICAgLl8kc2Nyb2xsZWRXcmFwcGVyXG4gICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3Njcm9sbERyYWdnYWJsZS1pbmVydGlhLW1vdmUnKTtcbiAgICB9XG59O1xuXG5cbnByb3RvdHlwZS5zdGFydEluZXJ0aW9uVG8gPSBmdW5jdGlvbiAoeDEsIHkxKSB7XG4gICAgdmFyIGxhc3RYID0gMDtcbiAgICB2YXIgbGFzdFkgPSAwO1xuXG4gICAgdGhpcy5fbGFzdEluZXJ0aW9uc1BvaW50c1xuICAgICAgICAuZm9yRWFjaChmdW5jdGlvbiAodikge1xuICAgICAgICAgICAgbGFzdFggKz0gdi54O1xuICAgICAgICAgICAgbGFzdFkgKz0gdi55O1xuICAgICAgICB9KTtcblxuICAgIGxhc3RYID0gbGFzdFggLyB0aGlzLl9sYXN0SW5lcnRpb25zUG9pbnRzLmxlbmd0aDtcbiAgICBsYXN0WSA9IGxhc3RZIC8gdGhpcy5fbGFzdEluZXJ0aW9uc1BvaW50cy5sZW5ndGg7XG5cbiAgICB0aGlzLl9jbGVhck1vdmVQb2ludHMoKVxuICAgICAgICAuX3NldEluZXJ0aW9uKGxhc3RYLCBsYXN0WSwgeDEsIHkxKVxuICAgICAgICAuaW5lcnRpb25Nb3ZlKCk7XG59O1xuXG5wcm90b3R5cGUuX3NldEluZXJ0aW9uID0gZnVuY3Rpb24gKHgxLCB5MSwgeDIsIHkyKSB7XG4gICAgdGhpcy5faW5lcnRpYVggPSAoeDEgLSB4MikgKiA2MDsgLy9wZXIgc2VjXG4gICAgdGhpcy5faW5lcnRpYVkgPSAoeTEgLSB5MikgKiA2MDtcblxuICAgIHRoaXMuX3RvdGFsSW5lcnRpb25FbmVyZ3kgPSBNYXRoLmFicyh0aGlzLl9pbmVydGlhWCkgKyBNYXRoLmFicyh0aGlzLl9pbmVydGlhWSk7XG4gICAgdGhpcy5fdG90YWxJbmVydGlvbkZyYW1lcyA9IHRoaXMuX2luZXJ0aWFTcGVlZDtcblxuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IEluZXJ0aWE7XG5cbn0se31dLDI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xudmFyIEluZXJ0aWEgPSByZXF1aXJlKCcuL2RyYWdnYWJsZS1zY3JvbGxfaW5lcnRpb24nKTtcclxuXHJcblxyXG4kLmZuLmRyYWdnYWJsZVNjcm9sbCA9IGZ1bmN0aW9uIERyYWdnYWJsZVNjcm9sbChjb25maWcpIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKiBTZWxmIGNvbnN0cnVjdCBmdW5jdGlvbiBieSBqUXVlcnkgY2FsbGluZ1xyXG4gICAgICpcclxuICAgICAqICovXHJcblxyXG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIERyYWdnYWJsZVNjcm9sbCkpIHtcclxuICAgICAgICBjb25maWcgPSBEcmFnZ2FibGVTY3JvbGwuX3ZhbGlkYXRlQ29uZmlnKGNvbmZpZyk7XHJcbiAgICAgICAgY29uZmlnLiRlbGVtZW50ID0gdGhpcztcclxuXHJcbiAgICAgICAgcmV0dXJuIG5ldyBEcmFnZ2FibGVTY3JvbGwoY29uZmlnKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLl9jb25maWcgPSBjb25maWc7XHJcbiAgICB0aGlzLl8kc2Nyb2xsZWRFbG0gPSB0aGlzLl9jb25maWcuJGVsZW1lbnQ7XHJcbiAgICB0aGlzLl9wcmVzc2VkID0gZmFsc2U7XHJcbiAgICB0aGlzLl9pc0FuaW1hdGUgPSBmYWxzZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKiBTY3JvbGwgcGFyYW1zOlxyXG4gICAgICpcclxuICAgICAqICovXHJcblxyXG4gICAgdGhpcy5fc3RhcnRTY3JvbGxYID0gdW5kZWZpbmVkO1xyXG4gICAgdGhpcy5fc3RhcnRTY3JvbGxZID0gdW5kZWZpbmVkO1xyXG4gICAgdGhpcy5fc3RhcnRNb3VzZWRvd25YID0gdW5kZWZpbmVkO1xyXG4gICAgdGhpcy5fc3RhcnRNb3VzZWRvd25ZID0gdW5kZWZpbmVkO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqIEluZXJ0aWEgYnkgZHJhZyBtb3VzZVxyXG4gICAgICpcclxuICAgICAqICovXHJcblxyXG4gICAgdGhpcy5faW5lcnRpYSA9IG5ldyBJbmVydGlhKHRoaXMsIHRoaXMuX2NvbmZpZy5pbmVydGlhbFJlc2lzdGFuY2UpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqIEluaXRpYWxpemVcclxuICAgICAqXHJcbiAgICAgKiAqL1xyXG5cclxuICAgIHRoaXMuX2ZpbmRFbG1zKClcclxuICAgICAgICAuX2FwcGVuZFN0eWxlcygpXHJcbiAgICAgICAgLl9pbml0TGlzdGVuZXJzKCk7XHJcbn07XHJcblxyXG5cclxudmFyIHN0YXRpY3MgPSAkLmZuLmRyYWdnYWJsZVNjcm9sbDtcclxudmFyIHByb3RvdHlwZSA9ICQuZm4uZHJhZ2dhYmxlU2Nyb2xsLnByb3RvdHlwZTtcclxuXHJcblxyXG4vKipcclxuICpcclxuICpcclxuICogU3RhdGljcyBtZXRob2RzOlxyXG4gKlxyXG4gKlxyXG4gKiAqL1xyXG5cclxuc3RhdGljcy5kZWZhdWx0Q29uZmlnID0ge1xyXG4gICAgc2Nyb2xsWDogdHJ1ZSxcclxuICAgIHNjcm9sbFk6IHRydWUsXHJcbiAgICBkcm9wT25Nb3VzZUxlYXZlOiBmYWxzZSxcclxuICAgIGFuaW1hdGVTY3JvbGxCeUNvbnRyb2xzOiB0cnVlLFxyXG4gICAgYW5pbWF0ZVNjcm9sbFRpbWU6IDIwMCxcclxuICAgIGhpZGVTY3JvbGxiYXJzOiB0cnVlLFxyXG4gICAgaW5lcnRpYUJ5RHJhZ2dpbmc6IHRydWUsXHJcbiAgICBkZXRlY3REaXJlY3Rpb25EcmFnOiB0cnVlLFxyXG4gICAgcmVtb3ZlRGlyZWN0aW9uRHJhZ09uTW91c2VVcDogdHJ1ZSxcclxuICAgIGluZXJ0aWFsUmVzaXN0YW5jZTogMTUwXHJcbn07XHJcblxyXG5cclxuc3RhdGljcy5fdmFsaWRhdGVDb25maWcgPSBmdW5jdGlvbiAoY29uZikge1xyXG4gICAgc3dpdGNoICh0eXBlb2YgKGNvbmYpKSB7XHJcbiAgICAgICAgY2FzZSAnb2JqZWN0JzpcclxuICAgICAgICAgICAgcmV0dXJuICQuZXh0ZW5kKHN0YXRpY3MuZGVmYXVsdENvbmZpZywgY29uZik7XHJcbiAgICAgICAgY2FzZSAndW5kZWZpbmVkJzpcclxuICAgICAgICAgICAgcmV0dXJuICQuZXh0ZW5kKHN0YXRpY3MuZGVmYXVsdENvbmZpZywge30pO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRHJhZ2dhYmxlU2Nyb2xsOiBVbmRlZmluZWQgdHlwZSBvZiBjb25maWcgYXJndW1lbnQuJyk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5cclxuc3RhdGljcy5fdW5pdHNDb252ZXJ0ZXJzID0ge1xyXG4gICAgcHg6IGZ1bmN0aW9uIChkaWcpIHtcclxuICAgICAgICByZXR1cm4gZGlnO1xyXG4gICAgfSxcclxuICAgIHZ3OiAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciAkZG9jID0gJChkb2N1bWVudCk7XHJcblxyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoZGlnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAkZG9jLndpZHRoKCkgLyAxMDAgKiBkaWc7XHJcbiAgICAgICAgfVxyXG4gICAgfSkoKSxcclxuICAgIHZoOiAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciAkZG9jID0gJChkb2N1bWVudCk7XHJcblxyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoZGlnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAkZG9jLmhlaWdodCgpIC8gMTAwICogZGlnO1xyXG4gICAgICAgIH1cclxuICAgIH0pKClcclxufTtcclxuXHJcblxyXG5zdGF0aWNzLmFkZFVuaXRDb252ZXJ0ZXIgPSBmdW5jdGlvbiAodW5pdCwgY29udmVydGVyKSB7XHJcbiAgICBpZiAoc3RhdGljcy5fdW5pdHNDb252ZXJ0ZXJzW3VuaXRdKVxyXG4gICAgICAgIGNvbnNvbGUud2FybignQ29udmVydGVyIGZvciAnICsgdW5pdCArICcgd2FzIGNoYW5nZWQuJyk7XHJcblxyXG4gICAgc3RhdGljcy5fdW5pdHNDb252ZXJ0ZXJzW3VuaXRdID0gY29udmVydGVyO1xyXG59O1xyXG5cclxuXHJcbnN0YXRpY3MuY29udmVydGVyVW5pdFRvUHhzID0gZnVuY3Rpb24gKGRpZywgdW5pdCkge1xyXG4gICAgdmFyIGNvbnZlcnRlciA9IHN0YXRpY3MuX3VuaXRzQ29udmVydGVyc1t1bml0XTtcclxuXHJcbiAgICBpZiAoIWNvbnZlcnRlcilcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuZGVmaW5lZCBjc3MgdW5pdHMgbmFtZWQgYXM6IFwiJyArIHVuaXQgKyAnXCIgXFxuXFwuJyArXHJcbiAgICAgICAgICAgICdBZGQgY29udmVydGVyICgkLmZuLmRyYWdnYWJsZVNjcm9sbC5hZGRVbml0Q29udmVydGVyKHVuaXQsIGNvbnZlcnRGdW5jdGlvbikpIHRvIFBYcyBmb3IgdGhhdCB1bml0LCBvciB5b3UgaGF2ZSBhIHR5cG8uJyk7XHJcblxyXG4gICAgcmV0dXJuIGNvbnZlcnRlcihkaWcpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKlxyXG4gKlxyXG4gKiBQcm90b3R5cGUgbWV0aG9kczpcclxuICpcclxuICpcclxuICogKi9cclxuXHJcbnByb3RvdHlwZS5zY3JvbGxUbyA9IGZ1bmN0aW9uICh0dXJuLCB1bml0cywgYW5pbSkge1xyXG4gICAgdmFyIG1ldGhvZCA9ICdzY3JvbGwnICsgdHVybi5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHR1cm4uc2xpY2UoMSksIHZhbDtcclxuXHJcbiAgICBpZiAodW5pdHMgIT09IHVuZGVmaW5lZCkge1xyXG5cclxuICAgICAgICBpZiAoYW5pbSkge1xyXG4gICAgICAgICAgICB2YXIgYW5pbVBhcmFtID0ge307XHJcblxyXG4gICAgICAgICAgICBhbmltUGFyYW1bbWV0aG9kXSA9IHVuaXRzO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fJHNjcm9sbGVkRWxtXHJcbiAgICAgICAgICAgICAgICAuYW5pbWF0ZShhbmltUGFyYW0sXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY29uZmlnLmFuaW1hdGVTY3JvbGxUaW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faXNBbmltYXRlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2lzQW5pbWF0ZSA9IHRydWU7XHJcblxyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl8kc2Nyb2xsZWRFbG1bbWV0aG9kXSh1bml0cyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdmFsID0gdGhpcy5fJHNjcm9sbGVkRWxtW21ldGhvZF0oKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdmFsO1xyXG59O1xyXG5cclxuXHJcblxyXG5wcm90b3R5cGUuZW1pdEV2ZW50ID0gZnVuY3Rpb24gKGV2KSB7XHJcbiAgICB0aGlzLl8kc2Nyb2xsZWRFbG0udHJpZ2dlcihldik7XHJcbn07XHJcblxyXG5wcm90b3R5cGUuX2ZpbmRFbG1zID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdGhpcy5fJHNjcm9sbGVkV3JhcHBlciA9IHRoaXMuX2NvbmZpZ1xyXG4gICAgICAgIC4kZWxlbWVudDtcclxuXHJcbiAgICB0aGlzLl8kc2Nyb2xsZWRFbG0gPSB0aGlzLl9jb25maWdcclxuICAgICAgICAuJGVsZW1lbnRcclxuICAgICAgICAuZmluZCgnW2RhdGEtZHJhZ2dhYmxlLXNjcm9sbGVkLWNvbnRlbnRdJyk7XHJcblxyXG4gICAgaWYgKHRoaXMuXyRzY3JvbGxlZEVsbS5sZW5ndGggPT09IDApXHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdEcmFnZ2FibGVTY3JvbGw6IENhbm5vbiBmaW5kIHNjcm9sbGVkIGNvbnRlbnQgZWxlbWVudC4gXFxuXFxcclxuICAgICAgICAgICAgVXNlIFtkYXRhLWRyYWdnYWJsZS1zY3JvbGxlZC1jb250ZW50XSBpbnNpZGUgW2RhdGEtZHJhZ2dhYmxlLXNjcm9sbF0gY29udGFpbmVyLicpO1xyXG5cclxuICAgIGlmICh0aGlzLl8kc2Nyb2xsZWRFbG0ubGVuZ3RoID4gMSlcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0RyYWdnYWJsZVNjcm9sbDogRm91bmQgbW9yZSB0aGFuIG9uZSBbZGF0YS1kcmFnZ2FibGUtc2Nyb2xsZWQtY29udGVudF0gaW5zaWRlIFtkYXRhLWRyYWdnYWJsZS1zY3JvbGxdIGNvbnRhaW5lci4nKTtcclxuXHJcbiAgICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcblxyXG5wcm90b3R5cGUuX2FwcGVuZFN0eWxlcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBoaWRlU2Nyb2xsID0gdGhpcy5fY29uZmlnXHJcbiAgICAgICAgLmhpZGVTY3JvbGxiYXJzO1xyXG5cclxuICAgIHRoaXMuXyRzY3JvbGxlZFdyYXBwZXJcclxuICAgICAgICAuY3NzKCd1c2VyLXNlbGVjdCcsICdub25lJyk7XHJcblxyXG4gICAgaWYgKGhpZGVTY3JvbGwpIHtcclxuICAgICAgICB0aGlzLl8kc2Nyb2xsZWRXcmFwcGVyXHJcbiAgICAgICAgICAgIC5jc3MoJ292ZXJmbG93JywgJ2hpZGRlbicpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuXyRzY3JvbGxlZEVsbVxyXG4gICAgICAgIC5jc3Moe1xyXG4gICAgICAgICAgICAnb3ZlcmZsb3cnOiAnc2Nyb2xsJyxcclxuICAgICAgICAgICAgJ2hlaWdodCc6IGhpZGVTY3JvbGwgPyAnY2FsYygxMDAlICsgMTdweCknIDogJzEwMCUnLFxyXG4gICAgICAgICAgICAnd2lkdGgnOiBoaWRlU2Nyb2xsID8gJ2NhbGMoMTAwJSArIDE3cHgpJyA6ICcxMDAlJyxcclxuICAgICAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcblxyXG5wcm90b3R5cGUuX3JlbW92ZURpcmVjdGlvbnNDbGFzc2VzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgaWYgKHRoaXMuX2NvbmZpZy5kZXRlY3REaXJlY3Rpb25EcmFnICYmIHRoaXMuX2NvbmZpZy5yZW1vdmVEaXJlY3Rpb25EcmFnT25Nb3VzZVVwKSB7XHJcbiAgICAgICAgdGhpcy5fJHNjcm9sbGVkV3JhcHBlclxyXG4gICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3Njcm9sbC1kcmFnZ2FibGVfbW92ZV9sZWZ0IHNjcm9sbC1kcmFnZ2FibGVfbW92ZV9yaWdodCBzY3JvbGwtZHJhZ2dhYmxlX21vdmVfdG9wIHNjcm9sbC1kcmFnZ2FibGVfbW92ZV9ib3R0b20nKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcblxyXG5wcm90b3R5cGUuX3RvZ2dsZURpcmVjdGlvbnNDbGFzc2VzID0gZnVuY3Rpb24gKHByZXZYLCBwcmV2WSwgY3VyclgsIGN1cnJZKSB7XHJcblxyXG4gICAgaWYgKCBwcmV2WCA8IGN1cnJYICkge1xyXG4gICAgICAgIHRoaXMuXyRzY3JvbGxlZFdyYXBwZXJcclxuICAgICAgICAgICAgLmFkZENsYXNzKCdzY3JvbGwtZHJhZ2dhYmxlX21vdmVfbGVmdCcpXHJcbiAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnc2Nyb2xsLWRyYWdnYWJsZV9tb3ZlX3JpZ2h0Jyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlmIChwcmV2WCA9PT0gY3VyclgpIHtcclxuICAgICAgICAgICAgdGhpcy5fJHNjcm9sbGVkV3JhcHBlclxyXG4gICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdzY3JvbGwtZHJhZ2dhYmxlX21vdmVfcmlnaHQgc2Nyb2xsLWRyYWdnYWJsZV9tb3ZlX2xlZnQnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl8kc2Nyb2xsZWRXcmFwcGVyXHJcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3Njcm9sbC1kcmFnZ2FibGVfbW92ZV9yaWdodCcpXHJcbiAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3Njcm9sbC1kcmFnZ2FibGVfbW92ZV9sZWZ0Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmICggcHJldlkgPCBjdXJyWSApIHtcclxuICAgICAgICB0aGlzLl8kc2Nyb2xsZWRXcmFwcGVyXHJcbiAgICAgICAgICAgIC5hZGRDbGFzcygnc2Nyb2xsLWRyYWdnYWJsZV9tb3ZlX3RvcCcpXHJcbiAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnc2Nyb2xsLWRyYWdnYWJsZV9tb3ZlX2JvdHRvbScpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAocHJldlkgPT09IGN1cnJZKSB7XHJcbiAgICAgICAgICAgIHRoaXMuXyRzY3JvbGxlZFdyYXBwZXJcclxuICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnc2Nyb2xsLWRyYWdnYWJsZV9tb3ZlX2JvdHRvbSBzY3JvbGwtZHJhZ2dhYmxlX21vdmVfdG9wJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fJHNjcm9sbGVkV3JhcHBlclxyXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzY3JvbGwtZHJhZ2dhYmxlX21vdmVfYm90dG9tJylcclxuICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnc2Nyb2xsLWRyYWdnYWJsZV9tb3ZlX3RvcCcpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcblxyXG5wcm90b3R5cGUuX2luaXRMaXN0ZW5lcnMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB0aGlzLl8kc2Nyb2xsZWRFbG1cclxuICAgICAgICAub24oJ21vdXNlZG93bicsIHRoaXMuX19tb3VzZWRvd25IYW5kbGVyLmJpbmQodGhpcykpXHJcbiAgICAgICAgLm9uKCdtb3VzZXVwJywgdGhpcy5fX21vdXNldXBIYW5kbGVyLmJpbmQodGhpcykpXHJcbiAgICAgICAgLm9uKCdtb3VzZW1vdmUnLCB0aGlzLl9fbW91c2Vtb3ZlSGFuZGxlci5iaW5kKHRoaXMpKTtcclxuXHJcbiAgICB0aGlzLl8kc2Nyb2xsZWRXcmFwcGVyXHJcbiAgICAgICAgLmZpbmQoJ1tkYXRhLWRyYWdnYWJsZS1zY3JvbGwtY29udHJvbF0nKVxyXG4gICAgICAgIC5vbignY2xpY2snLCB0aGlzLl9fY29udHJvbHNDbGlja0hhbmRsZXIuYmluZCh0aGlzKSk7XHJcblxyXG4gICAgaWYgKHRoaXMuX2NvbmZpZy5kcm9wT25Nb3VzZUxlYXZlKSB7XHJcbiAgICAgICAgdGhpcy5fJHNjcm9sbGVkRWxtXHJcbiAgICAgICAgICAgIC5vbignbW91c2VsZWF2ZScsIHRoaXMuX19tb3VzZXVwSGFuZGxlci5iaW5kKHRoaXMpKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcblxyXG4vKipcclxuICpcclxuICpcclxuICogVW5iaW5kIHByb3RvdHlwZSBtZXRob2RzKGV2ZW50LWhhbmRsZXJzKTpcclxuICpcclxuICpcclxuICogKi9cclxuXHJcbnByb3RvdHlwZS5fX21vdXNldXBIYW5kbGVyID0gZnVuY3Rpb24gKGV2KSB7XHJcbiAgICB0aGlzLl9wcmVzc2VkID0gZmFsc2U7XHJcbiAgICB0aGlzLl8kc2Nyb2xsZWRXcmFwcGVyXHJcbiAgICAgICAgLnJlbW92ZUNsYXNzKCdzY3JvbGxEcmFnZ2FibGUtZHJhZ2luZycpO1xyXG5cclxuICAgIHRoaXMuX3JlbW92ZURpcmVjdGlvbnNDbGFzc2VzKCk7XHJcblxyXG4gICAgdGhpcy5faW5lcnRpYVxyXG4gICAgICAgIC5zdGFydEluZXJ0aW9uVG8oZXYuY2xpZW50WCwgZXYuY2xpZW50WSk7XHJcbn07XHJcblxyXG5cclxucHJvdG90eXBlLl9fbW91c2Vkb3duSGFuZGxlciA9IGZ1bmN0aW9uIChldikge1xyXG4gICAgdGhpcy5fcHJlc3NlZCA9IHRydWU7XHJcbiAgICB0aGlzLl9zdGFydE1vdXNlZG93blggPSBldi5jbGllbnRYO1xyXG4gICAgdGhpcy5fc3RhcnRNb3VzZWRvd25ZID0gZXYuY2xpZW50WTtcclxuICAgIHRoaXMuX3N0YXJ0U2Nyb2xsWCA9IHRoaXMuc2Nyb2xsVG8oJ2xlZnQnKTtcclxuICAgIHRoaXMuX3N0YXJ0U2Nyb2xsWSA9IHRoaXMuc2Nyb2xsVG8oJ3RvcCcpO1xyXG5cclxuICAgIHRoaXMuX2luZXJ0aWFcclxuICAgICAgICAuYWRkTW92ZVBvaW50cyhldi5jbGllbnRYLCBldi5jbGllbnRZKVxyXG4gICAgICAgIC5yZXNldCgpO1xyXG5cclxuICAgIHRoaXMuXyRzY3JvbGxlZFdyYXBwZXIuYWRkQ2xhc3MoJ3Njcm9sbERyYWdnYWJsZS1kcmFnaW5nJyk7XHJcbn07XHJcblxyXG5cclxucHJvdG90eXBlLl9fbW91c2Vtb3ZlSGFuZGxlciA9IGZ1bmN0aW9uIChldikge1xyXG5cclxuICAgIHZhciBwcmV2WCA9IHRoaXMuc2Nyb2xsVG8oJ2xlZnQnKSxcclxuICAgICAgICBwcmV2WSA9IHRoaXMuc2Nyb2xsVG8oJ3RvcCcpLFxyXG4gICAgICAgIGN1cnJlbnRYID0gdGhpcy5fc3RhcnRTY3JvbGxYICsgKHRoaXMuX3N0YXJ0TW91c2Vkb3duWCAtIGV2LmNsaWVudFgpLFxyXG4gICAgICAgIGN1cnJlbnRZID0gdGhpcy5fc3RhcnRTY3JvbGxZICsgKHRoaXMuX3N0YXJ0TW91c2Vkb3duWSAtIGV2LmNsaWVudFkpO1xyXG5cclxuICAgIGlmICh0aGlzLl9wcmVzc2VkKSB7XHJcblxyXG4gICAgICAgIHRoaXMuX2luZXJ0aWFcclxuICAgICAgICAgICAgLmFkZE1vdmVQb2ludHMoZXYuY2xpZW50WCwgZXYuY2xpZW50WSk7XHJcblxyXG4gICAgICAgIHRoaXMuX2NvbmZpZy5zY3JvbGxYXHJcbiAgICAgICAgJiYgdGhpcy5zY3JvbGxUbygnbGVmdCcsIGN1cnJlbnRYKTtcclxuXHJcbiAgICAgICAgdGhpcy5fY29uZmlnLnNjcm9sbFlcclxuICAgICAgICAmJiB0aGlzLnNjcm9sbFRvKCd0b3AnLCBjdXJyZW50WSk7XHJcblxyXG4gICAgICAgIHRoaXMuX3RvZ2dsZURpcmVjdGlvbnNDbGFzc2VzKHByZXZYLCBwcmV2WSwgY3VycmVudFgsIGN1cnJlbnRZKTtcclxuICAgIH1cclxufTtcclxuXHJcblxyXG5wcm90b3R5cGUuX19jb250cm9sc0NsaWNrSGFuZGxlciA9IGZ1bmN0aW9uIChldikge1xyXG5cclxuICAgIGlmICh0aGlzLl9pc0FuaW1hdGUpXHJcbiAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgIHRoaXMuX2luZXJ0aWEucmVzZXQoKTtcclxuXHJcbiAgICB2YXIgJHRhcmdldCA9ICQoZXYuY3VycmVudFRhcmdldCksXHJcbiAgICAgICAgZGF0YSA9ICR0YXJnZXQuZGF0YSgnZHJhZ2dhYmxlU2Nyb2xsQ29udHJvbCcpLnNwbGl0KCc6JyksXHJcbiAgICAgICAgZGlyZWN0aW9uID0gZGF0YVswXSxcclxuICAgICAgICBzdGVwID0gc3RhdGljcy5jb252ZXJ0ZXJVbml0VG9QeHMocGFyc2VJbnQoZGF0YVsxXSksIGRhdGFbMV0ubWF0Y2goL1teXFxkXFwuXSsvaSlbMF0pLFxyXG4gICAgICAgIGN1cnJlbnRWYWw7XHJcblxyXG4gICAgc3dpdGNoIChkaXJlY3Rpb24pIHtcclxuICAgICAgICBjYXNlICd0b3AnOlxyXG4gICAgICAgICAgICBzdGVwID0gMCAtIHN0ZXA7XHJcbiAgICAgICAgICAgIGN1cnJlbnRWYWwgPSB0aGlzLnNjcm9sbFRvKCd0b3AnKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgIGNhc2UgJ2JvdHRvbSc6XHJcbiAgICAgICAgICAgIGN1cnJlbnRWYWwgPSB0aGlzLnNjcm9sbFRvKCd0b3AnKTtcclxuICAgICAgICAgICAgZGlyZWN0aW9uID0gJ3RvcCc7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBjYXNlICdsZWZ0JzpcclxuICAgICAgICAgICAgY3VycmVudFZhbCA9IHRoaXMuc2Nyb2xsVG8oJ2xlZnQnKTtcclxuICAgICAgICAgICAgc3RlcCA9IDAgLSBzdGVwO1xyXG4gICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgY2FzZSAncmlnaHQnOlxyXG4gICAgICAgICAgICBkaXJlY3Rpb24gPSAnbGVmdCc7XHJcbiAgICAgICAgICAgIGN1cnJlbnRWYWwgPSB0aGlzLnNjcm9sbFRvKCdsZWZ0Jyk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuc2Nyb2xsVG8oZGlyZWN0aW9uLCBjdXJyZW50VmFsICsgc3RlcCwgdGhpcy5fY29uZmlnLmFuaW1hdGVTY3JvbGxCeUNvbnRyb2xzKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQXV0by1zZWFyY2ggZm9yIGVsZW1lbnRzIGJ5IGF0dHJpYnV0ZVxyXG4gKiAqL1xyXG5cclxudmFyICRjb250YWluZXJzID0gJCgnW2RhdGEtZHJhZ2dhYmxlLXNjcm9sbF0nKTtcclxuXHJcbmlmICgkY29udGFpbmVycy5sZW5ndGgpIHtcclxuICAgICRjb250YWluZXJzLmVhY2goZnVuY3Rpb24gKGksIGVsKSB7XHJcbiAgICAgICAgJChlbCkuZHJhZ2dhYmxlU2Nyb2xsKCk7XHJcbiAgICB9KTtcclxufVxufSx7XCIuL2RyYWdnYWJsZS1zY3JvbGxfaW5lcnRpb25cIjoxfV19LHt9LFsyXSkiXX0=
