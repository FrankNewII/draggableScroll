!function(e){if("function"==typeof define&&define.amd)define(["jquery"],e);else if("object"==typeof module&&module.exports)module.exports=e(require("jquery"));else{if("undefined"==typeof jQuery)throw new Error("DraggableScroll: Draggable scroll is depended on JQuery. \n            Please append JQuery to document before load DraggableScroll plugin.");e(jQuery)}}(function(r){r.fn.draggableScroll=function e(l){if(!(this instanceof e))return(l=e.validateConfig(l)).$element=this,new e(l);this._config=l,this._$scrolledElm=this._config.$element,this._pressed=!1,this._startX=void 0,this._isAnimate=!1,this._startY=void 0,this._startScrollX=void 0,this._startScrollY=void 0,this._findElm()._appendStyles()._initListeners()};var l=r.fn.draggableScroll,e=r.fn.draggableScroll.prototype;l.validateConfig=function(e){switch(typeof e){case"object":return r.extend(l.defaultConfig,e);case"undefined":return r.extend(l.defaultConfig,{});default:throw new Error("DraggableScroll: Undefined type of config argument.")}},l.defaultConfig={scrollX:!0,scrollY:!0,dropOnMouseLeave:!1,animateScrollByControls:!0,animateScrollTime:200,hideScrollbars:!0},e.scrollTo=function(e,l,t){var o,s="scroll"+e.charAt(0).toUpperCase()+e.slice(1);if(void 0!==l)if(t){var r={};r[s]=l,this._$scrolledElm.animate(r,this._config.animateScrollTime),this._isAnimate=!0,setTimeout(function(){this._isAnimate=!1}.bind(this),this._config.animateScrollTime)}else this._$scrolledElm[s](l);else o=this._$scrolledElm[s]();return o},e._findElm=function(){if(this._$scrolledWrapper=this._config.$element,this._$scrolledElm=this._config.$element.find("[data-draggable-scrolled-content]"),0===this._$scrolledElm.length)throw new Error("DraggableScroll: Cannon find scrolled content element. \n            Use [data-draggable-scrolled-content] inside [data-draggable-scroll] container.");if(1<this._$scrolledElm.length)throw new Error("DraggableScroll: Found more than one [data-draggable-scrolled-content] inside [data-draggable-scroll] container.");return this},e._appendStyles=function(){var e=this._config.hideScrollbars;return this._$scrolledWrapper.css("user-select","none"),e&&this._$scrolledWrapper.css("overflow","hidden"),this._$scrolledElm.css({overflow:"scroll",height:e?"calc(100% + 17px)":"100%",width:e?"calc(100% + 17px)":"100%"}),this},e._initListeners=function(){return this._$scrolledElm.on("mousedown",this.__mousedownHandler.bind(this)).on("mouseup",this.__mouseupHandler.bind(this)).on("mousemove",this.__mousemoveHandler.bind(this)),this._$scrolledWrapper.find("[data-draggable-scroll-control]").on("click",this.__controlsClickHandler.bind(this)),this._config.dropOnMouseLeave&&this._$scrolledElm.on("mouseleave",this.__mouseupHandler.bind(this)),this},e.__mouseupHandler=function(){this._pressed=!1,this._$scrolledWrapper.removeClass("scrollDraggable-draging")},e.__mousedownHandler=function(e){this._pressed=!0,this._startX=e.clientX,this._startY=e.clientY,this._startScrollX=this.scrollTo("left"),this._startScrollY=this.scrollTo("top"),this._$scrolledWrapper.addClass("scrollDraggable-draging")},e.__mousemoveHandler=function(e){this._pressed&&(this._config.scrollX&&this.scrollTo("left",this._startScrollX+(this._startX-e.clientX)),this._config.scrollY&&this.scrollTo("top",this._startScrollY+(this._startY-e.clientY)))},e.__controlsClickHandler=function(e){if(!this._isAnimate){var l,t=r(e.target).data("draggableScrollControl").split(":"),o=t[0],s=parseInt(t[1]);switch(o){case"top":s=0-s,l=this.scrollTo("top");break;case"bottom":l=this.scrollTo("top"),o="top";break;case"left":l=this.scrollTo("left"),s=0-s;break;case"right":o="left",l=this.scrollTo("left")}console.log(o,l+s,this._config.animateScrollByControls),this.scrollTo(o,l+s,this._config.animateScrollByControls)}};var t=r("[data-draggable-scroll]");t.length&&t.each(function(e,l){r(l).draggableScroll()})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
