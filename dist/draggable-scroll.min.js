!function s(i,n,l){function a(r,t){if(!n[r]){if(!i[r]){var e="function"==typeof require&&require;if(!t&&e)return e(r,!0);if(c)return c(r,!0);throw new Error("Cannot find module '"+r+"'")}var o=n[r]={exports:{}};i[r][0].call(o.exports,function(t){var e=i[r][1][t];return a(e||t)},o,o.exports,s,i,n,l)}return n[r].exports}for(var c="function"==typeof require&&require,t=0;t<l.length;t++)a(l[t]);return a}({1:[function(t,e,r){function o(t,e){this._totalInertionEnergy=0,this._totalInertionFrames=1,this._inertiaX=0,this._inertiaY=0,this._inertiaSpeed=e,this.aggregator=t}var s=o.prototype;s.reset=function(){this._totalInertionEnergy=0,this._totalInertionFrames=1},s.inertionMove=function(){if(1500<this._totalInertionEnergy){var t=this;this.aggregator._$scrolledWrapper.addClass("scrollDraggable-inertia-move");var e=this._inertiaX/this._totalInertionFrames;this._totalInertionEnergy-=12*Math.abs(e),this.aggregator.scrollTo("left",this.aggregator.scrollTo("left")+e);var r=this._inertiaY/this._totalInertionFrames;this._totalInertionEnergy-=12*Math.abs(r),this.aggregator.scrollTo("top",this.aggregator.scrollTo("top")+r),this.aggregator.emitEvent({type:"draggableScroll:inertia",data:{leavePower:this._totalInertionEnergy,stepX:e,stepY:r}}),0<this._totalInertionEnergy?(this._totalInertionFrames++,setTimeout(function(){t.inertionMove()},Math.ceil(1e3/60))):(this._breakInertion=!1,this.aggregator._$scrolledWrapper.removeClass("scrollDraggable-inertia-move"))}else this.aggregator._$scrolledWrapper.removeClass("scrollDraggable-inertia-move")},s.setInertion=function(t,e,r,o){return this._inertiaX=60*(t-r),this._inertiaY=60*(e-o),this._totalInertionEnergy=Math.abs(this._inertiaX)+Math.abs(this._inertiaY),this._totalInertionFrames=this._inertiaSpeed,this},e.exports=o},{}],2:[function(t,e,r){var o=t("./draggable-scroll_inertion");$.fn.draggableScroll=function t(e){if(!(this instanceof t))return(e=t._validateConfig(e)).$element=this,new t(e);this._config=e,this._$scrolledElm=this._config.$element,this._pressed=!1,this._isAnimate=!1,this._startScrollX=void 0,this._startScrollY=void 0,this._startMousedownX=void 0,this._startMousedownY=void 0,this._pointsToCheckImpulse=4,this._lastInertionsPoints=[],this._inertia=new o(this,this._config.inertialResistance),this._findElms()._appendStyles()._initListeners()};var s,i,n=$.fn.draggableScroll,l=$.fn.draggableScroll.prototype;n.defaultConfig={scrollX:!0,scrollY:!0,dropOnMouseLeave:!1,animateScrollByControls:!0,animateScrollTime:200,hideScrollbars:!0,inertiaByDragging:!0,detectDirectionDrag:!0,removeDirectionDragOnMouseUp:!0,inertialResistance:150},n._validateConfig=function(t){switch(typeof t){case"object":return $.extend(n.defaultConfig,t);case"undefined":return $.extend(n.defaultConfig,{});default:throw new Error("DraggableScroll: Undefined type of config argument.")}},n._unitsConverters={px:function(t){return t},vw:(i=$(document),function(t){return i.width()/100*t}),vh:(s=$(document),function(t){return s.height()/100*t})},n.addUnitConverter=function(t,e){n._unitsConverters[t]&&console.warn("Converter for "+t+" was changed."),n._unitsConverters[t]=e},n.converterUnitToPxs=function(t,e){var r=n._unitsConverters[e];if(!r)throw new Error('Undefined css units named as: "'+e+'" \n.Add converter ($.fn.draggableScroll.addUnitConverter(unit, convertFunction)) to PXs for that unit, or you have a typo.');return r(t)},l.scrollTo=function(t,e,r){var o,s="scroll"+t.charAt(0).toUpperCase()+t.slice(1);if(void 0!==e)if(r){var i={};i[s]=e,this._$scrolledElm.animate(i,this._config.animateScrollTime,function(){this._isAnimate=!1}.bind(this)),this._isAnimate=!0}else this._$scrolledElm[s](e);else o=this._$scrolledElm[s]();return o},l.emitEvent=function(t){this._$scrolledElm.trigger(t)},l._findElms=function(){if(this._$scrolledWrapper=this._config.$element,this._$scrolledElm=this._config.$element.find("[data-draggable-scrolled-content]"),0===this._$scrolledElm.length)throw new Error("DraggableScroll: Cannon find scrolled content element. \n            Use [data-draggable-scrolled-content] inside [data-draggable-scroll] container.");if(1<this._$scrolledElm.length)throw new Error("DraggableScroll: Found more than one [data-draggable-scrolled-content] inside [data-draggable-scroll] container.");return this},l._appendStyles=function(){var t=this._config.hideScrollbars;return this._$scrolledWrapper.css("user-select","none"),t&&this._$scrolledWrapper.css("overflow","hidden"),this._$scrolledElm.css({overflow:"scroll",height:t?"calc(100% + 17px)":"100%",width:t?"calc(100% + 17px)":"100%"}),this},l._addMovePoints=function(t,e){return this._lastInertionsPoints.push({x:t,y:e})>this._pointsToCheckImpulse&&this._lastInertionsPoints.shift(),this},l._clearMovePoints=function(){return this._lastInertionsPoints.length=0,this},l._removeDirectionsClasses=function(){return this._config.detectDirectionDrag&&this._config.removeDirectionDragOnMouseUp&&this._$scrolledWrapper.removeClass("scroll-draggable_move_left scroll-draggable_move_right scroll-draggable_move_top scroll-draggable_move_bottom"),this},l._toggleDirectionsClasses=function(t,e,r,o){return t<r?this._$scrolledWrapper.addClass("scroll-draggable_move_left").removeClass("scroll-draggable_move_right"):t===r?this._$scrolledWrapper.removeClass("scroll-draggable_move_right scroll-draggable_move_left"):this._$scrolledWrapper.addClass("scroll-draggable_move_right").removeClass("scroll-draggable_move_left"),e<o?this._$scrolledWrapper.addClass("scroll-draggable_move_top").removeClass("scroll-draggable_move_bottom"):e===o?this._$scrolledWrapper.removeClass("scroll-draggable_move_bottom scroll-draggable_move_top"):this._$scrolledWrapper.addClass("scroll-draggable_move_bottom").removeClass("scroll-draggable_move_top"),this},l._initListeners=function(){return this._$scrolledElm.on("mousedown",this.__mousedownHandler.bind(this)).on("mouseup",this.__mouseupHandler.bind(this)).on("mousemove",this.__mousemoveHandler.bind(this)),this._$scrolledWrapper.find("[data-draggable-scroll-control]").on("click",this.__controlsClickHandler.bind(this)),this._config.dropOnMouseLeave&&this._$scrolledElm.on("mouseleave",this.__mouseupHandler.bind(this)),this},l.__mouseupHandler=function(t){this._pressed=!1,this._$scrolledWrapper.removeClass("scrollDraggable-draging"),this._removeDirectionsClasses();var e=0,r=0;this._lastInertionsPoints.forEach(function(t){e+=t.x,r+=t.y}),e/=this._lastInertionsPoints.length,r/=this._lastInertionsPoints.length,this._clearMovePoints();var o=t.clientX,s=t.clientY;this._inertia.setInertion(e,r,o,s).inertionMove()},l.__mousedownHandler=function(t){this._pressed=!0,this._startMousedownX=t.clientX,this._startMousedownY=t.clientY,this._startScrollX=this.scrollTo("left"),this._startScrollY=this.scrollTo("top"),this._addMovePoints(t.clientX,t.clientY),this._inertia.reset(),this._$scrolledWrapper.addClass("scrollDraggable-draging")},l.__mousemoveHandler=function(t){var e=this.scrollTo("left"),r=this.scrollTo("top"),o=this._startScrollX+(this._startMousedownX-t.clientX),s=this._startScrollY+(this._startMousedownY-t.clientY);this._pressed&&(this._addMovePoints(t.clientX,t.clientY),this._config.scrollX&&this.scrollTo("left",o),this._config.scrollY&&this.scrollTo("top",s),this._toggleDirectionsClasses(e,r,o,s))},l.__controlsClickHandler=function(t){if(!this._isAnimate){this._inertia.reset();var e,r=$(t.currentTarget).data("draggableScrollControl").split(":"),o=r[0],s=n.converterUnitToPxs(parseInt(r[1]),r[1].match(/[^\d\.]+/i)[0]);switch(o){case"top":s=0-s,e=this.scrollTo("top");break;case"bottom":e=this.scrollTo("top"),o="top";break;case"left":e=this.scrollTo("left"),s=0-s;break;case"right":o="left",e=this.scrollTo("left")}this.scrollTo(o,e+s,this._config.animateScrollByControls)}};var a=$("[data-draggable-scroll]");a.length&&a.each(function(t,e){$(e).draggableScroll()})},{"./draggable-scroll_inertion":1}]},{},[2]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
